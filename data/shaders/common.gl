#define PI                 3.14159265359
#define AMBIENT_INTENSITY  0.05
#define DIFFUSE_INTENSITY  0.2
#define SPECULAR_EXP       2.0
#define SPECULAR_INT       0.1

#ifdef PBR
// Takes normal, halfway vector between view angle and light angle
// Parameter a -> alpha describing roughness usually aplha = roughness^2
float distribution_ggx(vec3 N, vec3 H, float roughness) {
    float nom    = roughness*roughness*roughness*roughness;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float denom  = (NdotH2 * (nom - 1.0) + 1.0);
    denom        = PI * denom * denom;
	
    return nom / denom;
}
// Takes multiplier between 0 -> 1 with 0 being complete microfacet shadowing 
// and roughness
float geometry_schlick_ggx(float NdotV, float roughness) {
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return num / denom;
}
// Takes normal, camera view direction, light direction vector, surface roughness
float geometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = geometry_schlick_ggx(NdotV, roughness);
    float ggx1  = geometry_schlick_ggx(NdotL, roughness);
	
    return ggx1 * ggx2;
}
vec3 fresnel_schlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

// @note Radiance scaled color
vec3 brdf(vec3 normal, vec3 view, vec3 albedo, vec3 light, vec3 light_col) {
    vec3 halfway_dir = normalize(view + light);
    vec3 radiance    = light_col; 
    float metallic   = 0.1;
    float roughness  = 0.9;

    vec3 F0 = mix(vec3(0.04), albedo, metallic);

    vec3 F  = fresnel_schlick(max(dot(halfway_dir, view), 0.0), F0);
    float NDF = distribution_ggx(normal, halfway_dir, roughness);       
    float G   = geometrySmith(normal, view, light, roughness);       

    // Actually calculate Cook-Torrance brdf integral for one light direction
    vec3 numerator    = NDF * G * F;
    float denominator = 4.0 * max(dot(normal, view), 0.0) * max(dot(normal, light), 0.0)  + 0.0001;
    vec3 specular     = numerator / denominator;

    // Calculate relative diffuse and specular contributions such that total
    // energy is 1
    vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;

    kD *= 1.0 - metallic;

    float NdotL = max(dot(normal, light), 0.0);
    return (kD * albedo / PI + specular) * radiance * NdotL;
}
#endif

#ifdef DIRECTIONAL 
vec3 blinn_phong(vec3 normal, vec3 view, vec3 light, vec3 light_col) {
    vec3 ambient_col = light_col * AMBIENT_INTENSITY;
    float diffuse_factor = dot(normal, -light);

    vec3 diffuse_col = vec3(0, 0, 0);
    vec3 specular_col = vec3(0, 0, 0);

    if (diffuse_factor > 0.f) {
        diffuse_col = light_col * DIFFUSE_INTENSITY * diffuse_factor;
        vec3 halfway_dir = normalize(-light + view);
        float specular_factor = dot(normal, halfway_dir);
        if (specular_factor > 0.f) {
            specular_factor = pow(specular_factor, SPECULAR_EXP);
            specular_col = light_col * SPECULAR_INT * specular_factor;
        }
    }

    return (ambient_col + specular_col + diffuse_col);
}
#endif


#ifdef GOOCH
const vec3 gooch_color_1 = vec3(0,0,0.5);
const vec3 gooch_color_2 = vec3(0.5,0,0);
vec3 gooch(vec3 albedo, vec3 light, vec3 light_col, vec3 normal, vec3 view) {
    float a = 0.7f;
    float b = 0.7f;

    float NL = dot(normalize(normal), normalize(light));
    
    float it = ((1.f + NL) / 2.f);
    vec3 color = (1.f-it) * (gooch_color_1 + a*albedo.xyz) + it * (gooch_color_2 + b*albedo.xyz) + 0.01*light_col;
    
    //Highlights
    vec3 R = reflect(-normalize(light), normalize(normal));
    float ER = clamp( dot(normalize(view), normalize(R)) , 0.f, 1.f);
    
    vec4 spec = vec4(SPECULAR_INT) * pow(ER, SPECULAR_EXP);

    return vec3(color+spec.xyz);
}
#endif

vec4 calculate_color(vec3 normal, vec3 view, vec4 albedo, vec3 light, vec3 light_col) {
#ifdef GOOCH
    vec3 hdr_color = gooch(albedo.rgb, light, light_col, normal, view);
#endif

#ifdef DIRECTIONAL 
    vec3 hdr_color = albedo.rgb * blinn_phong(normal, view, light, light_col);
#endif

#ifdef PBR
    vec3 ambient = 0.2*albedo.rgb;
    vec3 hdr_color = ambient + brdf(normal, view, albedo.rgb, light, light_col) + brdf(normal, view, albedo.rgb, vec3(0, 1, 0), vec3(5.0));
#endif

    const float gamma = 1.8;

    // reinhard tone mapping
    vec3 mapped = hdr_color / (hdr_color + vec3(1.0)); 

    // gamma correction 
    mapped = pow(mapped, vec3(1.0 / gamma));

    return vec4(mapped, albedo.a);
}