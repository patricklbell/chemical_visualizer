#begin VERTEX

layout (location = 0) in vec3 in_vertex;
layout (location = 1) in vec3 in_normal;
layout (location = 2) in vec4 in_albedo;
// mat4 takes up 4 attributes
layout (location = 3) in mat4 in_model;
layout (location = 7) in mat4 in_mvp;

out vec3 position;
out vec3 normal;
out vec4 albedo;

void main(){
    vec4 vertex = vec4(in_vertex, 1.0);
    gl_Position = in_mvp * vertex;
	position = (in_model * vertex).xyz;
    normal = normalize((in_model * vec4(in_normal, 0.0)).xyz);
    albedo = in_albedo;
}

#end

#begin FRAGMENT

#macro PBR                1
#macro GOOCH              0
#macro DIRECTIONAL        0

#load common.gl

in vec3 position;
in vec3 normal;
in vec4 albedo;

layout (location = 0) out vec4 out_color;

uniform vec3      light_direction;
uniform vec3      light_color;
uniform vec3      camera_position;

void main() {
    out_color = calculate_color(normal, position - camera_position, albedo, light_direction, light_color);
}

#end
