#if defined(COMPILING_VS)

layout (location = 0) in vec3 in_vertex;
layout (location = 1) in vec3 in_normal;
layout (location = 2) in vec4 in_albedo;
// mat4 takes up 4 attributes
layout (location = 3) in mat4 in_model;
layout (location = 7) in mat4 in_mvp;

out vec3 position;
out vec3 normal;
out vec4 albedo;

void main(){
    vec4 vertex = vec4(in_vertex, 1.0);
    gl_Position = in_mvp * vertex;
	position = (in_model * vertex).xyz;
    normal = normalize((in_model * vec4(in_normal, 0.0)).xyz);
    albedo = in_albedo;
}

#endif

#if defined(COMPILING_FS)

#ifdef GLES
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
#endif // GLES

#define PI                 3.14159265359
#define AMBIENT_INTENSITY  0.5
#define DIFFUSE_INTENSITY  0.1
#define SPECULAR_EXP       5.0
#define SPECULAR_INT       0.1
#define PBR                1
#define GOOCH              0
#define DIRECTIONAL        0

in vec3 position;
in vec3 normal;
in vec4 albedo;

layout (location = 0) out vec4 out_color;

uniform vec3      sun_direction;
uniform vec3      sun_color;
uniform vec3      camera_position;

#if PBR
// Takes normal, halfway vector between view angle and light angle
// Parameter a -> alpha describing roughness usually aplha = roughness^2
float distributionGGX(vec3 N, vec3 H, float roughness)
{
    float nom    = roughness*roughness*roughness*roughness;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float denom  = (NdotH2 * (nom - 1.0) + 1.0);
    denom        = PI * denom * denom;
	
    return nom / denom;
}
// Takes multiplier between 0 -> 1 with 0 being complete microfacet shadowing 
// and roughness
float geometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return num / denom;
}
// Takes normal, camera view direction, light direction vector, surface roughness
float geometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = geometrySchlickGGX(NdotV, roughness);
    float ggx1  = geometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}
// @note Radiance scaled color
vec3 brdfSchlickGGX(vec3 position, vec3 normal, vec3 albedo, vec3 light_dir, vec3 light_col){
    vec3 view_dir = normalize(camera_position - position);
    vec3 halfway_dir = normalize(view_dir + light_dir);
    vec3 radiance    = light_col; 
    float metallic   = 0.0;
    float roughness  = 0.8; 

    vec3 F0 = mix(vec3(0.04), albedo, metallic);

    vec3 F  = fresnelSchlick(max(dot(halfway_dir, view_dir), 0.0), F0);
    float NDF = distributionGGX(normal, halfway_dir, roughness);       
    float G   = geometrySmith(normal, view_dir, light_dir, roughness);       

    // Actually calculate Cook-Torrance brdf integral for one light direction
    vec3 numerator    = NDF * G * F;
    float denominator = 4.0 * max(dot(normal, view_dir), 0.0) * max(dot(normal, light_dir), 0.0)  + 0.0001;
    vec3 specular     = numerator / denominator;

    // Calculate relative diffuse and specular contributions such that total
    // energy is 1
    vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;

    kD *= 1.0 - metallic;

    float NdotL = max(dot(normal, light_dir), 0.0);
    return (kD * albedo / PI + specular) * radiance * NdotL;
}
#endif

#if DIRECTIONAL
vec3 calcDirectionalLight(vec3 in_position, vec3 in_normal)
{
    vec3 ambient_col = sun_color * AMBIENT_INTENSITY;
    float diffuse_factor = dot(in_normal, -sun_direction);

    vec3 diffuse_col = vec3(0, 0, 0);
    vec3 specular_col = vec3(0, 0, 0);

    if (diffuse_factor > 0) {
        diffuse_col = sun_color * DIFFUSE_INTENSITY * diffuse_factor;
        vec3 view_dir = normalize(camera_position - in_position);
        vec3 halfway_dir = normalize(-sun_direction + view_dir);
        float specular_factor = dot(in_normal, halfway_dir);
        if (specular_factor > 0) {
            specular_factor = pow(specular_factor, SPECULAR_EXP);
            specular_col = sun_color * SPECULAR_INT * specular_factor;
        }
    }

    return (ambient_col + specular_col + diffuse_col);
}
#endif

#if GOOCH
const vec3 gooch_color_1 = vec3(0,0,1.0);
const vec3 gooch_color_2 = vec3(1.0,0,0);
vec3 gooch_shading(vec3 m_color, //color of the mesh
                   float m_shine, //shininess of the surface
                   vec3 l_direction, //light direction
                   vec3 v_normal, //normal
                   vec3 c_direction) //camera direction
{
    float a = 0.7;
    float b = 0.7;

    float NL = dot(normalize(v_normal), normalize(l_direction));
    
    float it = ((1 + NL) / 2);
    vec3 color = (1-it) * (gooch_color_1 + a*m_color.xyz) + it * (gooch_color_2 + b*m_color.xyz);
    
    //Highlights
    vec3 R = reflect(-normalize(l_direction), normalize(v_normal));
    float ER = clamp( dot(normalize(c_direction), normalize(R)) , 0, 1);
    
    vec4 spec = vec4(SPECULAR_INT) * pow(ER, SPECULAR_EXP);

    return vec3(color+spec.xyz);
}
#endif

void main() {
#if GOOCH
    vec3 hdr_color = gooch_shading(albedo.rgb, 5.0, -sun_direction, normal, position - camera_position);
#endif

#if DIRECTIONAL 
    vec3 hdr_color = albedo.rgb * calcDirectionalLight(position, normal);
#endif

#if PBR
    float ao = 0.4; 
    vec3 ambient = albedo.rgb * ao;
    vec3 hdr_color = ambient + brdfSchlickGGX(position, normal, albedo.rgb, -sun_direction, sun_color);
#endif

    const float gamma = 1.6;

    // reinhard tone mapping
    vec3 mapped = hdr_color / (hdr_color + vec3(1.0)); 

    // gamma correction 
    mapped = pow(mapped, vec3(1.0 / gamma));

    out_color = vec4(mapped, albedo.a);
}

#endif
